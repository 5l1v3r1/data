{
    "name": "Form-based File Upload", 
    "tags": [
        "file", 
        "upload"
    ], 
    "description": "\nThe design of many web applications require that users be able to upload files\nthat will either be stored or processed by the receiving web server.\n\nArachni has flagged this not as a vulnerability, but as a prompt for the\npenetration tester to conduct further manual testing on the file upload function.\n\nAn insecure form-based file upload could allow a cyber-criminal a means to abuse\nand successfully exploit the server directly, and/or any third party that may\nlater access the file. This can occur through uploading a file containing server\nside-code (such as PHP) that is then executed when requested by the client.\n", 
    "references": {
        "owasp.org": "https://www.owasp.org/index.php/Unrestricted_File_Upload"
    }, 
    "cwe": 200, 
    "remedy_guidance": "\nThe identified page should at a minimum:\n\n1. Whitelist permitted file types and block all others. This should be conducted\n    on the MIME type of the file rather than its extension.\n2. As the file is uploaded, and prior to being handled (written to the disk) by\n    the server, the filename should be stripped of all control, special, or\n    Unicode characters.\n3. Ensure that the upload is conducted via the HTTP `POST` method rather than\n    `GET` or `PUT`.\n4. Ensure that the file is written to a directory that does not hold any execute\n    permission and that all files within that directory inherit the same permissions.\n5. Scan (if possible) with an up-to-date virus scanner before being stored.\n6. Ensure that the application handles files as per the host operating system.\n    For example, the length of the file name is appropriate, there is adequate\n    space to store the file, protection against overwriting other files etc.\n", 
    "severity": "informational"
}