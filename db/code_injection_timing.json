{"name":"Code injection (timing attack)","description":"\nA modern web application will be reliant on several different programming languages.\n\nThese languages can be broken up in two flavours. These are client-side languages\n(such as those that run in the browser -- like JavaScript) and server-side\nlanguages (which are executed by the server -- like ASP, PHP, JSP, etc.) to form\nthe dynamic pages (client-side code) that are then sent to the client.\n\nBecause all server-side code should be executed by the server, it should only ever\ncome from a trusted source.\n\nCode injection occurs when the server takes untrusted code (ie. from the client)\nand executes it.\n\nCyber-criminals will abuse this weakness to execute arbitrary code on the server,\nwhich could result in complete server compromise.\n\nBy injecting server-side code that is known to take a specific amount of time to\nexecute, Arachni was able to detect time-based code injection. This indicates that\nproper input sanitisation is not occurring.\n","references":{"PHP":"http://php.net/manual/en/function.eval.php","Perl":"http://perldoc.perl.org/functions/eval.html","Python":"http://docs.python.org/py3k/library/functions.html#eval","ASP":"http://www.aspdev.org/asp/asp-eval-execute/","Ruby":"http://en.wikipedia.org/wiki/Eval#Ruby"},"tags":["code","injection","timing","blind"],"cwe":94,"severity":"high","remedy_guidance":"\nIt is recommended that untrusted input is never processed as server-side code.\n\nTo validate input, the application should ensure that the supplied value contains\nonly the data that are required to perform the relevant action.\n\nFor example, where a username is required, then no non-alpha characters should not\nbe accepted.\n"}