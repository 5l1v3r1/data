{
    "name": "Code injection", 
    "tags": [
        "code", 
        "injection", 
        "regexp"
    ], 
    "description": "\nA modern web application will be reliant on several different programming languages.\n\nThese languages can be broken up in two flavours. These are client-side languages\n(such as those that run in the browser -- like JavaScript) and server-side\nlanguages (which are executed by the server -- like ASP, PHP, JSP, etc.) to form\nthe dynamic pages (client-side code) that are then sent to the client.\n\nBecause all server-side code should be executed by the server, it should only ever\ncome from a trusted source.\n\nCode injection occurs when the server takes untrusted code (ie. from the client)\nand executes it.\n\nCyber-criminals will abuse this weakness to execute arbitrary code on the server,\nwhich could result in complete server compromise.\n\nArachni was able to inject specific server-side code and have the executed output\nfrom the code contained within the server response. This indicates that proper input\nsanitisation is not occurring.\n", 
    "references": {
        "Python": "http://docs.python.org/py3k/library/functions.html#eval", 
        "ASP": "http://www.aspdev.org/asp/asp-eval-execute/", 
        "PHP": "http://php.net/manual/en/function.eval.php", 
        "Perl": "http://perldoc.perl.org/functions/eval.html"
    }, 
    "cwe": 94, 
    "remedy_guidance": "\nIt is recommended that untrusted input is never processed as server-side code.\n\nTo validate input, the application should ensure that the supplied value contains\nonly the data that are required to perform the relevant action.\n\nFor example, where a username is required, then no non-alpha characters should not\nbe accepted.\n", 
    "severity": "high"
}