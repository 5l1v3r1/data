{
    "name": "DOM-based Cross-Site Scripting (XSS) via input fields", 
    "tags": [
        "xss", 
        "dom", 
        "injection", 
        "script"
    ], 
    "description": "\nClient-side scripts are used extensively by modern web applications.\nThey perform from simple functions (such as the formatting of text) up to full\nmanipulation of client-side data and Operating System interaction.\n\nUnlike traditional Cross-Site Scripting (XSS), where the client is able to inject\nscripts into a request and have the server return the script to the client, DOM\nXSS does not require that a request be sent to the server and may be abused entirely\nwithin the loaded page.\n\nThis occurs when elements of the DOM (known as the sources) are able to be\nmanipulated to contain untrusted data, which the client-side scripts (known as the\nsinks) use or execute an unsafe way.\n\nArachni has discovered that by inserting an HTML element into the pages DOM inputs\n(sources) it was possible to then have the HTML element rendered as part of the\npage by the sink.\n", 
    "references": {
        "WASC": "http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting", 
        "OWASP - Prevention": "https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet", 
        "OWASP": "https://www.owasp.org/index.php/DOM_Based_XSS"
    }, 
    "cwe": 79, 
    "remedy_guidance": "\nClient-side document rewriting, redirection, or other sensitive action, using\nuntrusted data, should be avoided wherever possible, as these may not be inspected\nby server side filtering.\n\nTo remedy DOM XSS vulnerabilities where these sensitive document actions must be\nused, it is essential to:\n\n1. Ensure any untrusted data is treated as text, as opposed to being interpreted\n    as code or mark-up within the page.\n2. Escape untrusted data prior to being used within the page. Escaping methods\n    will vary depending on where the untrusted data is being used.\n    (See references for details.)\n3. Use `document.createElement`, `element.setAttribute`, `element.appendChild`,\n    etc. to build dynamic interfaces as opposed to HTML rendering methods such as\n    `document.write`, `document.writeIn`, `element.innerHTML`, or `element.outerHTML `etc.\n", 
    "severity": "high"
}