{
    "name": "Remote File Inclusion", 
    "tags": [
        "remote", 
        "file", 
        "inclusion", 
        "injection", 
        "regexp"
    ], 
    "description": "\nWeb applications occasionally use parameter values to store the location of a file\nwhich will later be required by the server.\n\nAn example of this is often seen in error pages, where the actual file path for\nthe error page is stored in a parameter value -- for example `example.com/error.php?page=404.php`.\n\nA remote file inclusion occurs when the parameter value (ie. path to file being\ncalled by the server) can be substituted with the address of remote resource --\nfor example: `yoursite.com/error.asp?page=http://anothersite.com/somethingBad.php`\n\nIn some cases, the server will process the fetched resource; therefore,\nif the resource contains server-side code matching that of the framework being\nused (ASP, PHP, JSP, etc.), it is probable that the resource will be executed\nas if it were part of the web application.\n\nThe tool discovered that it was possible to substitute a parameter value with an\nexternal resource and have the server fetch it and include its contents in the response.\n", 
    "references": {
        "WASC": "http://projects.webappsec.org/Remote-File-Inclusion", 
        "Wikipedia": "http://en.wikipedia.org/wiki/Remote_File_Inclusion"
    }, 
    "cwe": 94, 
    "remedy_guidance": "\nIt is recommended that untrusted data is never used to form a file location to\nbe included.\n\nTo validate data, the application should ensure that the supplied value for a file\nis permitted. This can be achieved by performing whitelisting on the parameter\nvalue, by matching it against a list of permitted files. If the supplied value\ndoes not match any value in the whitelist, then the server should redirect to a\nstandard error page.\n\nIn some scenarios, where dynamic content is being requested, it may not be possible\nto perform validation against a list of trusted resources, therefore the list must\nalso become dynamic (updated as the files change), or perform filtering to remove\nextraneous user input (such as semicolons, periods etc.) and only permit `a-z0-9`.\n\nIt is also advised that sensitive files are not stored within the web root and\nthat the user permissions enforced by the directory are correct.\n", 
    "severity": "high"
}